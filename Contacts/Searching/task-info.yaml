type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Organisation.java
  visible: true
  text: |
    package contacts;

    public class Organisation extends Record {
        private String orgName;
        private String address;
        public Organisation(String orgName, String address, String number) {
            super(number);
            orgName(orgName);
            address(address);
            setPerson(false);
        }

        private void orgName(String orgName){
            if(orgName.equals("")){
                System.out.println("Bad organisation name!");
                this.orgName = "[no data]";
            }else{
                this.orgName = orgName;
            }
        }
        private void address(String address){
            if(address.equals("")){
                System.out.println("Bad address!");
                this.address = "[no data]";
            }else{
                this.address = address;
            }
        }

        public void setOrgName(String orgName) {
            orgName(orgName);
            setTimeLastEdited();
        }

        public void setAddress(String address) {
            address(address);
            setTimeLastEdited();
        }

        public String getAddress() {
            return address;
        }

        public String getOrgName() {
            return orgName;
        }
    }
  learner_created: true
- name: src/contacts/Record.java
  visible: true
  text: |
    package contacts;

    import java.text.SimpleDateFormat;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Record {
        private String number = "";
        private String timeCreated;
        private String timeLastEdited = "";
        private boolean isPerson;
        Record(String number){
            setNumber(number);
            timeCreated = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm").format(new java.util.Date());
        }

        public String getNumber() {
            if(hasNumber()){
                return number;
            }
            return "[no number]";
        }

        public void setNumber(String number) {
            if(checkValidity(number)) {
                this.number = number;
                setTimeLastEdited();
            }else{
                this.number = "";
            }
        }

        private boolean checkValidity(String number){
            //check value using regex and set value to field only if sastify these rules:
            //Phone number is split using space or dash
            //Prefix may have +
            //1st/2nd group have (), max only 1 grp
            //grp contains number/upper/lowercase, at least 2 symbols in length
            //1st grp may have 1 symbol in length

            Pattern pattern = Pattern.compile("(^\\+?\\d{0,100}(\\w+[ -]+)*([ -]+\\(\\w+\\)[ -]+|[ -]+\\(\\w+\\)$|\\(\\w+\\)[ -]+|\\(\\w+\\)$){0,1}([ -]?\\w{2,100})*)");
            Matcher matcher = pattern.matcher(number);
            boolean matchFound = matcher.find();
            //System.out.println(matcher.group());
            if(matchFound && matcher.group().equals(number)){
                return true;
            }
            System.out.println("Wrong number format!");
            return false;
        }

        public boolean hasNumber(){
            if(number.equals("")){
                return false;
            }
            return true;
        }

        public void setTimeLastEdited() {
            this.timeLastEdited = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm").format(new java.util.Date());
        }

        public String getTimeCreated() {
            return timeCreated;
        }

        public String getTimeLastEdited() {
            return timeLastEdited;
        }

        public void setPerson(boolean person) {
            isPerson = person;
        }

        public boolean getPerson(){
            return isPerson;
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;

    public class Person extends Record{
        private String name;
        private String surname;
        private String birthDate;
        private String gender;
        public Person(String name, String surname, String birthDate, String gender,String number) {
            super(number);
            name(name);
            surname(surname);
            birthDate(birthDate);
            gender(gender);
            setPerson(true);
        }
        private void birthDate(String birthDate){
            if(birthDate.equals("")){
                System.out.println("Bad birth date!");
                this.birthDate = "[no data]";
            }else{
                this.birthDate = birthDate;
            }
        }
        private void gender(String gender){
            if(gender.equals("M") || gender.equals("F")){
                this.gender = gender;
            }else{
                System.out.println("Bad gender!");
                this.gender = "[no data]";
            }
        }
        private void name(String name){
            if(name.equals("")){
                System.out.println("Bad name!");
                this.name = "[no data]";
            }else{
                this.name = name;
            }
        }
        private void surname(String surname){
            if(surname.equals("")){
                System.out.println("Bad surname!");
                this.surname = "[no data]";
            }else{
                this.surname = surname;
            }
        }

        public void setSurname(String surname) {
            surname(surname);
            setTimeLastEdited();
        }

        public String getSurname() {
            return surname;
        }

        public void setName(String name) {
            name(name);
            setTimeLastEdited();
        }

        public String getName() {
            return name;
        }

        public void setBirthDate(String birthDate) {
            birthDate(birthDate);
            setTimeLastEdited();
        }

        public String getBirthDate() {
            return birthDate;
        }

        public void setGender(String gender) {
            gender(gender);
            setTimeLastEdited();
        }

        public String getGender() {
            return gender;
        }
    }
  learner_created: true
- name: src/contacts/Contacts.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Contacts {
        static Scanner scanner = new Scanner(System.in);
        private static List<Record> recordList = new ArrayList<>();
        Contacts(){
        }
        //add/remove/edit/get number of records
        //if number is empty -> [no number]
        public static void addContacts(){
            System.out.println("Enter the type (person, organisation): ");
            String type = scanner.nextLine();
            if(type.equals("person")){
                addPerson();
            }else if(type.equals("organization")){
                addOrg();
            }
        }
        public static void addPerson(){

            System.out.println("Enter the name of the person: ");
            String name = scanner.nextLine();
            System.out.println("Enter the surname of the person: ");
            String surname = scanner.nextLine();
            System.out.println("Enter the birth date: ");
            String birthDate = scanner.nextLine();
            System.out.println("Enter the gender (M, F): ");
            String gender = scanner.nextLine();
            System.out.println("Enter the number: ");
            String number = scanner.nextLine();

            Record person = new Person(name, surname, birthDate, gender, number);
            recordList.add(person);
            System.out.println("The record added.");
        }
        public static void addOrg(){

            System.out.println("Enter the organisation name: ");
            String name = scanner.nextLine();
            System.out.println("Enter the address: ");
            String address = scanner.nextLine();
            System.out.println("Enter the number: ");
            String number = scanner.nextLine();

            Record org = new Organisation(name, address, number);
            recordList.add(org);
            System.out.println("The record added.");
        }
        public static void editContacts(){
            if(recordList.isEmpty()){
                System.out.println("No records to edit!");
            }else {
                listContacts();
                System.out.println("Select a record: ");
                int idx = scanner.nextInt() - 1;
                Record record = recordList.get(idx);
                if(record.getPerson()) {
                    Person person = (Person) record;
                    System.out.println("Select a field (name, surname, birth, gender, number): ");
                    scanner.nextLine();
                    String field = scanner.nextLine();
                    switch (field) {
                        case "name":
                            System.out.println("Enter name: ");
                            person.setName(scanner.nextLine());
                            break;
                        case "surname":
                            System.out.println("Enter surname: ");
                            person.setSurname(scanner.nextLine());
                            break;
                        case "number":
                            System.out.println("Enter number: ");
                            person.setNumber(scanner.nextLine());
                            break;
                        case "birth":
                            System.out.println("Enter birth date: ");
                            person.setBirthDate(scanner.nextLine());
                            break;
                        case "gender":
                            System.out.println("Enter gender: ");
                            person.setGender(scanner.nextLine());
                            break;
                    }
                }else {
                    Organisation org = (Organisation) record;
                    System.out.println("Select a field (name, address, number): ");
                    scanner.nextLine();
                    String field = scanner.nextLine();
                    switch (field) {
                        case "name":
                            System.out.println("Enter organisation name: ");
                            org.setOrgName(scanner.nextLine());
                            break;
                        case "address":
                            System.out.println("Enter address: ");
                            org.setAddress(scanner.nextLine());
                            break;
                        case "number":
                            System.out.println("Enter number: ");
                            org.setNumber(scanner.nextLine());
                            break;
                    }
                }
                System.out.println("The record updated!");
                recordList.set(idx, record);
            }
        }
        public static void listContacts(){
            for(int i = 0; i < recordList.size(); i++){
                Record record = recordList.get(i);
                if(record.getPerson()){
                    Person person = (Person) record;
                    System.out.println((i+1) + ". " + person.getName()
                            + " " + person.getSurname());
                }else {
                    Organisation org = (Organisation) record;
                    System.out.println((i+1) + ". " + org.getOrgName());
                }
            }
        }
        public static void info(){
            listContacts();
            System.out.println("Enter index to show info: ");
            int i = scanner.nextInt() - 1;
            Record record = recordList.get(i);
            if(record.getPerson()){
                Person person = (Person) record;
                System.out.println("Name: " + person.getName()
                                + "\nSurname: " + person.getSurname()
                                + "\nBirth date: " + person.getBirthDate()
                                + "\nGender: " + person.getGender()
                                + "\nNumber: " + person.getNumber()
                                + "\nTime created: " + person.getTimeCreated()
                                + "\nTime last edit: " + person.getTimeLastEdited());
            }else {
                Organisation org = (Organisation) record;
                System.out.println("Organization name: " + org.getOrgName()
                        + "\nNumber: " + org.getNumber()
                        + "\nAddress: " + org.getAddress()
                        + "\nTime created: " + org.getTimeCreated()
                        + "\nTime last edit: " + org.getTimeLastEdited());
            }
            scanner.nextLine();
        }
        public static void removeContacts(){
            if(recordList.isEmpty()){
                System.out.println("No records to remove!");
            }else{
                listContacts();
                System.out.println("Select a record: ");
                recordList.remove(scanner.nextInt() - 1);
                System.out.println("The record removed!");
            }
        }

        public static void countContacts(){
            System.out.println("The Phone Book has " + recordList.size() + " records.");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement#comment
status: Unchecked
record: -1
